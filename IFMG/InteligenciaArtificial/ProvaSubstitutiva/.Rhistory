#Inicia Script
#Ordena o Vetor de Pecas a serem Inseridos
pecas<-OrdenaValoresDecrescenteCm2(pecas,valores)
valores<-CalculaValor(pecas);
lista<-CriaSolucao(estoque,pecas,chapaInicial)
atualPecas=lista[1]
atualEstoque=lista[2]
solucao<-SA(pecas,temperaturaInicial,temperaturaFinal,maxIteracoes,taxaResfriamento,percentualRemocao)
#view(chapaInicial,solucao[1])
#############################################
#Interpretacao Artigo
#############################################
#L=Comprimento
#W=Largura
#i=Indice da peça
#V=Valor
#Cada peça 1i' possui 3 atributos (l,w,v)
#R=Peça primária
#Quantidade de peças é  (0 <= QuantidadeMinima <= QuantidadePeças <= QuantidadeMaxima)
#P=Conjunto de peças a serem cortadas
#B=Conjunto de peças ja cortadas
#Representação da peça necessita apenas de dois pontos (um Mais superior a direita e um mais inferior a esquerda)
#L=Comprimento
#W=Largura
#i=Indice da peça
#V=Valor
#Cada peça 'i' possui 3 atributos (l,w,v)
#R=Peça primária
#Quantidade de peças é  (0 <= QuantidadeMinima <= QuantidadePeças <= QuantidadeMaxima)
#P=Conjunto de peças a serem cortadas
#B=Conjunto de peças ja cortadas
#Representação da peça necessita apenas de dois pontos (um Mais superior a direita e um mais inferior a esquerda)
#_______________________________________________________________________________
#'*' Significa que tem N
#peca<-c(comprimento,altura)
#pecas<-list(*peca)
#valor<-numeric(valor)
#valores<-c(*valor)
#vetor4Pontos<-c(x1,y1,x2,y2) sendo os 4 pontos a representação da Diagonal Secundaria de um bloco
#vetor2Dimensoes<-c(comprimento,altura)
#vetorOrigem<-c(x0,y0) Representação do ponto superior esquerdo do Bloco
#pontos<-list(vetor4Pontos)
#estoque<-list(*pontos)
#####################
##VIEW
#####################
ChapaInView<-function(vetor4Pontos){
x1=vetor4Pontos[1][1]
y1=vetor4Pontos[1][2]
x2=vetor4Pontos[1][3]
y2=vetor4Pontos[1][4]
print(x1,y1,x2,y2)
print(vetor4Pontos)
dispersaoLinha=round(runif(1,1,4))
orientacaoLinha=round(runif(1,1,4))
indice=round(runif(1,1, length(pecas)))
cores<-rainbow(length(pecas))
#rect(x1,y1,x2,y2,dispersaoLinha,orientacaoLinha,col=cores[indice])
rect(x1,y1,x2,y2,col=cores[indice])
}
view<-function(chapaInicial,solucao){
plot(0,0,xlim=c(0,chapaInicial[1]),ylim=c(0,chapaInicial[2]))
#Coloca a Borda da Peça
rect(0,0,chapaInicial[1],chapaInicial[2],border = "red")
rect(0,0,chapaInicial[1],chapaInicial[2],border = "red")
for(i in (1:length(solucao))){
ChapaInView(solucao[i])
}
}
#####################
##Mini
#####################
#Define Valor de uma peca
defineValor <- function(peca){
return((peca[1]*peca[2]));
}
#Define Area de uma peca
defineArea <- function(peca){
return(peca[1]*peca[2]);
}
#Calcula o Valor do cm^2 de uma peca
ValorCm2<-function(valor,peca){
area=defineArea(unlist(peca))
return(valor/area);
}
#Converte diagonal secundaria em um 'bloco' de duas dimensões (x,y)
ConvertePontosEmDimensao<-function(vetor4Pontos){
x1 <- vetor4Pontos[1]
y1 <- vetor4Pontos[2]
x2 <- vetor4Pontos[3]
y2 <- vetor4Pontos[4]
x<-abs(x1-x2)
y<-abs(y1-y2)
dimensao<-c(x,y)
return(dimensao)
}
#Converte (x,y) em uma diagonal secundaria a partir de um ponto de referencia'vetorOrigem'
ConverteDimensaoEmPontos <- function(vetor2Dimensoes,vetorOrigem){
comprimento <- vetor2Dimensoes[1]
altura <- vetor2Dimensoes[2]
origemX <- vetorOrigem[1]
origemY <- vetorOrigem[2]
x1<-origemX+comprimento
y1<-origemY
x2<-origemX
y2<-origemY-altura
pontos<-list(c(x1,y1,x2,y2))
return(pontos)
}
#####################
##Macro
#####################
#Calcula o valor de todas as pecas
CalculaValor<-function(pecas){
valoresAux<-c()
#Calcula Valor
for(i in 1:(length(pecas))){
valoresAux[i]=defineValor(unlist(pecas[i][1]))
}
return(valoresAux)
}
#Calcula o valor do cm^2 de Todas as Pecas
PrecoPorCm2<-function(pecas,valores){
#Inicializa variaveis
listaValorCm2<-c()
#Calcula melhor preço por 'cm^2' para todas as peças
for(i in 1:length(pecas)){
listaValorCm2[i]<-ValorCm2(valores[i],pecas[i]);
}
return(listaValorCm2)
}
#Ordena as pecas pelo valor do cm^2
OrdenaValoresDecrescenteCm2<-function(pecas,valores){
#Inicializa variaveis
listaValor<-c()
#Calcula melhor preço por 'cm^2' para todas as peças
listaValor<-PrecoPorCm2(pecas,valores)
while(TRUE){
#Ordena em Ordem Decrescente
max <- length(pecas)
flagTroca=0;
for(i in 1:max){
if(i!=max){
#Realiza Troca
if(listaValor[i]<listaValor[i+1]){
#Troca Peça
aux1<-pecas[i]
pecas[i]=pecas[i+1]
pecas[i+1]=aux1
#Troca Valor
aux2<-listaValor[i]
listaValor[i]=listaValor[i+1]
listaValor[i+1]=aux2
#AtivaFlag
flagTroca=flagTroca+1;
}
}
}
if(flagTroca == 0){
break;
}
}
return (pecas)
}
#Verifica se a Diagonal Secundaria esta representada dentro do Range da ChapaInicial,
Factbilidade<-function(vetor4Pontos){
#Legenda retorno
#0 Não factivel
#1 Factivel
origemX <- vetor4Pontos[1]
origemY <- vetor4Pontos[2]
finalX <- vetor4Pontos[3]
finalY <- vetor4Pontos[4]
#Verifica do jeito que veio
if( origemX >=0 && origemX<=chapaInicial[1]){
if(origemY >=0 && origemY<=chapaInicial[2]){
if(finalX >=0 && finalX<=chapaInicial[1]){
if(finalY >=0 && finalY<=chapaInicial[2]){
return(1)
}
}
}
}
#Não factivel
return(0);
}
#Verifica se Duas peças estão colidindo
VerificaColisaoEntre2Pecas<-function(Vetor4PontosA, Vetor4PontosB){
#Legenda retorno
#1=Colidiu
#0=Não colidiu
#Peça no estoque
objetoA<-Vetor4PontosA
A_x1<-objetoA[1]
A_y1<-objetoA[2]
A_x2<-objetoA[3]
A_y2<-objetoA[4]
#Peça a ser inserida
objetoB<-Vetor4PontosB
B_x1<-objetoB[1]
B_y1<-objetoB[2]
B_x2<-objetoB[3]
B_y2<-objetoB[4]
#Verifica Colisao 1
if((A_x2<B_x2 && B_x2<A_x1)||(A_x2<B_x1 && B_x1<A_x1)){
if((A_y2<B_y2 && B_y2<A_y1)||(A_y2<B_y1 && B_y1<A_y1)){
return(1)
}
}
#Verifica Colisao 2
if((B_x2<A_x2 && A_x2<B_x1)||(B_x2<A_x1 && A_x1<B_x1)){
if((B_y2<A_y2 && A_y2<B_y1)||(B_y2<A_y1 && A_y1<B_y1)){
return(1)
}
}
return(0)
}
#Verifica se o Bloco pode ser inserido no Estoque
PontosFactiveisNoEstoque<-function(pontos,estoque){
#-1 Extrapola o Range
#0 Não colide
#1 Colide
#Factivel?
pontos<-unlist(pontos)
if((Factbilidade(pontos)==0) || (Factbilidade(pontos)==2)){
#Extrapola as dimensoes
return(-1);
}
#Colide?
for(peca in estoque){
peca<-unlist(peca)
if(VerificaColisaoEntre2Pecas(peca,pontos)){
return(1)
}
}
return(0)
}
#Tenta Incluir Uma Peca no Estoque
TentaIncluirPeca <- function(vetor2Dimensoes,estoque,chapaInicial){
if(length(estoque)==0){
origem=c(0,chapaInicial[2]);
pontos<-ConverteDimensaoEmPontos(vetor2Dimensoes,origem)
#Inclui no Estoque
tamanhoEstoque <- length(estoque)
estoque[tamanhoEstoque+1]=pontos
return(estoque)
}else{
#Percorre Todo o Estoque
#Tenta inserir a peça perto da parte superior da diagonal secundaria
flagErro<-FALSE
for (i in length(estoque)){
peca<-unlist(estoque[i])
origem=c(peca[1],peca[2])
pontos<-ConverteDimensaoEmPontos(vetor2Dimensoes,origem)
#Verifica colisão
colide <- PontosFactiveisNoEstoque(pontos,estoque)
if(colide != 0){#Caso Colida ou extrapole
flagErro<-TRUE
break;
}
}
#Ponto inferior esquerdo da Diagonal secundaria
if(flagErro){
flagErro<-FALSE
for (i in length(estoque)){
peca<-unlist(estoque[i])
origem=c(peca[3],peca[4])
pontos<-ConverteDimensaoEmPontos(vetor2Dimensoes,origem)
#Verifica colisão
colide <- PontosFactiveisNoEstoque(pontos,estoque)
if(colide != 0){
flagErro<-TRUE
break;
}
}
}
#RODA A PEÇA
vetor2Dimensoes<-c(vetor2Dimensoes[2],vetor2Dimensoes[1])
#Tenta inserir a peça perto da parte superior da diagonal secundaria
flagErro<-FALSE
for (i in length(estoque)){
peca<-unlist(estoque[i])
origem=c(peca[1],peca[2])
pontos<-ConverteDimensaoEmPontos(vetor2Dimensoes,origem)
#Verifica colisão
colide <- PontosFactiveisNoEstoque(pontos,estoque)
if(colide != 0){#Caso Colida ou extrapole
flagErro<-TRUE
break;
}
}
#Ponto inferior esquerdo da Diagonal secundaria
if(flagErro){
flagErro<-FALSE
for (i in length(estoque)){
peca<-unlist(estoque[i])
origem=c(peca[3],peca[4])
pontos<-ConverteDimensaoEmPontos(vetor2Dimensoes,origem)
#Verifica colisão
colide <- PontosFactiveisNoEstoque(pontos,estoque)
if(colide != 0){
flagErro<-TRUE
break;
}
}
}
if(!flagErro){
#Inclui no Estoque
tamanhoEstoque <- length(estoque)
estoque[tamanhoEstoque+1]=pontos
return(estoque)
}
}
return(estoque)
}
#Cria uma Primeira Solução
CriaSolucao<-function(estoque,pecas,chapaInicial){
#Retorno
#list(pecas,estoque)
#Adiciona peça ao estoque
#("ate encher a capacidade do Estoque")
indiceExcluir=c();
for(indice in 1:length(pecas)){
#Pensar em como Excluir
antes <-length(estoque)
estoque<-TentaIncluirPeca(unlist(pecas[indice]),estoque,chapaInicial)
depois <-length(estoque)
if(antes!=depois){
indiceExcluir[length(indiceExcluir)+1]<-indice
}
}
#Exclui Peça da coleção de 'pecas'
for(indice in length(indiceExcluir):1){
pecas=pecas[-(indiceExcluir[indice])];
}
indicesExcluir=c();
valores <- CalculaValor(pecas);
pecas<-OrdenaValoresDecrescenteCm2(pecas,valores)
retorno<-list(pecas,estoque)
return(retorno)
}
VerificaAreaPreenchida<-function(estoque){
Area=0;
for(peca in estoque){
dimensaoPeca=ConvertePontosEmDimensao(unlist(peca))
Area=Area+defineArea(dimensaoPeca)
}
return(Area)
}
DeslocaEsquerda<-function(peca){
pontos<-unlist(peca)
pontos[1]=pontos[1]-1
pontos[3]=pontos[3]-1
return (list(pontos))
}
DeslocaCima<-function(peca){
pontos<-unlist(peca)
pontos[2]=pontos[2]+1
pontos[4]=pontos[4]+1
return (list(pontos))
}
DeslocaPecas<-function(estoque){
while(TRUE){
deslocamento=FALSE
#q<-scan()
view(chapaInicial,estoque)
for(indice in length(estoque)){
#Desloca Esquerda
#Salva estado atual da peça caso tenha que dar rollBack
pecaOld<-estoque[indice]
#Desloca a peça a esquerda
pecaNew<-DeslocaEsquerda(unlist(pecaOld))
pontos<-unlist(pecaNew)
#Remove a Peca do estoque
estoque[indice]<-list(c(0,0,0,0));
#Verifica se vai entrar em conflito com as demais peças
if(PontosFactiveisNoEstoque(pontos,estoque)!=0){
#volta a peca para o estoque
estoque[indice]<-pecaOld
}else{
estoque[indice]<-pecaNew
deslocamento=TRUE
}
#Desloca Direita
#Salva estado atual da peça caso tenha que dar rollBack
pecaOld<-estoque[indice]
#Desloca a peça a esquerda
pecaNew<-DeslocaEsquerda(unlist(pecaOld))
pontos<-unlist(pecaNew)
#Remove a Peca do estoque
estoque[indice]<-list(c(0,0,0,0));
#Verifica se vai entrar em conflito com as demais peças
if(PontosFactiveisNoEstoque(pontos,estoque)!=0){
#volta a peca para o estoque
estoque[indice]<-pecaOld
}else{
estoque[indice]<-pecaNew
deslocamento=TRUE
}
}
if(deslocamento==FALSE){
return(estoque)
}
}
}
FObjetiva<-VerificaAreaPreenchida
Troca<-function(solucao,pecas,percentualRemocao){
#retorno[1]=Solucao
#retorno[2]=Pecas
#Remover γ da área de R;
areaInicial=VerificaAreaPreenchida(solucao[1])
areaAtual=VerificaAreaPreenchida(solucao[1])
while(!((areaAtual/areaInicial)<=(1-percentualRemocao))){
#Sortea uma peça aleatoria dentro de Estoque
indice=round(runif(1,1, length(solucao)))
#Passa a peca a ser removida para o vetor de pecas
print(indice)
print(solucao)
print(unlist(solucao[indice])
q<-scan()
#pecas[length(pecas)+1]=ConvertePontosEmDimensao((solucao[indice]))
#Remove  a peça Alterada
solucao=solucao[-indice]
#Verifica a Area preenchida(Somatorio da Area das peças presente no 'estoque')
areaAtual=VerificaAreaPreenchida(solucao[1])
}
solucao<-DeslocaPecas(solucao)
CriarSolucao(solucao,pecas);
retornar (list(solucao,pecas));
}
SA <- function(pecas,temperaturaInicial,temperaturaFinal,maxIteracoes,taxaResfriamento,percentualRemocao)
{
#Ordena o Vetor de Pecas a serem Inseridos
#Atual
solucaoAtual=c()
pecasAtual=OrdenaValoresDecrescenteCm2(pecas,valores)
#Nova
solucaoNova=c()
pecasNova=c()
#Melhor
solucaoMelhor=c()
pecasMelhor=c()
#Prepara a Solução atual
lista=CriaSolucao(solucaoAtual,pecasAtual,chapaInicial)
pecasAtual=lista[1]
solucaoAtual=lista[2]
#Seta os primeiros valores como melhores
solucaoMelhor = solucaoAtual;
pecasMelhor = pecasAtual;
#Seta a temperatura
temperatura = temperaturaInicial;
#Seta o numero de Iterações
iteracaoT = 0;
cat('INICIO DO SA\n\n')
while(temperatura>temperaturaFinal){
while(iteracaoT<maxIteracoes){
#Incrementa +1 iteracao
iteracaoT<-iteracaoT+1
#Gera um Vizinho
cat('NovoVizinho\n\n')
list<-Troca(solucaoAtual,pecasAtual,percentualRemocao)
solucaoNova<-list[1]
pecasNova<-list[2]
#Verifica a qualidade da soluçaoNova
delta<-FObjetiva(atual)-FObjetiva(solucaoNova)
if(delta<0){
solucaoAtual<-solucaoNova
if(FObjetiva(solucaoNova)>FObjetiva(solucaoMelhor)){
#Seta the new Best
solucaoMelhor<-solucaoAtual
pecsaMelhor<-pecasAtual
}
}else{
#Se a nova solução não foi tão boa Verifica a possibilidade de aceita-la mesmo assim
Random <- runif(1, 0,1)
if(random<exp(-delta/temperatura)){
solucaoAtual<-solucaoNovo
pecasAtual<-pecaNovo
}
}
}
temperatura=temperatura*taxaResfriamento;
Iteracao=0;
}
return(solucaoMelhor)
}
#iniciando Variaveis
#Pecas<-c(largura,comprimento) talvez + qtdMin,qtdMax
pecas <- list(c(5,1),c(4,5),c(2,2),c(2,7),c(8,3),c(9,5),c(7,5),c(5,8),c(1,5),c(5,2))
valores <- CalculaValor(pecas);
#Estoque a peça tem list(c(x1,y1,x2,y2))
estoque <- list()
#Chapa Inicial Dimensao c(largura,comprimento)
chapaInicial <- c(10,10)
#Parametros Sa
temperaturaInicial<-100
temperaturaFinal<-1 #Não pode ser 0 pois demora muito a convergir devido ao Temperatura*=Alpha
maxIteracoes<-100000
taxaResfriamento<-0.01
percentualRemocao<-0.60
#Inicia Script
#Ordena o Vetor de Pecas a serem Inseridos
pecas<-OrdenaValoresDecrescenteCm2(pecas,valores)
valores<-CalculaValor(pecas);
lista<-CriaSolucao(estoque,pecas,chapaInicial)
atualPecas=lista[1]
atualEstoque=lista[2]
solucao<-SA(pecas,temperaturaInicial,temperaturaFinal,maxIteracoes,taxaResfriamento,percentualRemocao)
#view(chapaInicial,solucao[1])
quit()
source('~/Área de Trabalho/Faculdade/IFMG/InteligenciaArtificial/ProvaSubstitutiva/SA.r')
source('~/Área de Trabalho/Faculdade/IFMG/InteligenciaArtificial/ProvaSubstitutiva/SA.r')
